<?php

namespace App\Http\Controllers\lims;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Lims\Billing;
use App\Models\Lims\District;
use App\Models\Lims\Bank;
use App\Models\Lims\PanelLawyer;
use App\Models\Lims\User;
use Validator;
use Illuminate\Support\Facades\Auth;


class BillingController extends Controller
{
    // Billing data table page view
    public function indexBilling()
    {
        $bank_data = Bank::all();
        $district_data = District::all();
        $lawyer_data = PanelLawyer::all();
        $user_data = User::all();
        // $lawyer_data = PanelLawyer::where('role_id','=', '5')->get();
        
        return view('lims/billing/show_billing', compact('bank_data','district_data','lawyer_data','user_data'));
    }
    
    // Fetch all Billings ajax request
    public function fetchAllBilling()
    {
        $show_billing_data = Billing::all();
        $user_data = User::all();
        $district_data = District::all();
        $bank_data = Bank::all();

        $output = '';
        if ($show_billing_data->count() > 0) {
            $output .= '<table id="datatable-buttons" class="table table-bordered table-hover dt-responsive nowrap w-100">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Invoice ID</th>
                    <th>Case ID</th>
                    <th>Case Type</th>
                    <th>Lawyer Name</th>
                    <th>Bill Amount</th>
                    <th>Date of Bill</th>
                    <th>District</th>
                    <th>Generated By</th>
                    <th>Bank Name</th>
                    <th>Cheque Number</th>
                    <th>Bill Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>';
            foreach ($show_billing_data as $key => $data) {
                if ($data->bill_status == 1) {
                    $data->bill_status = "Paid";
                    $bill_status_badge_class = 'badge bg-success';
                } else {
                    $data->bill_status = "Unpaid";
                    $bill_status_badge_class = 'badge bg-danger';
                }

                if ($data->case_type == 1) {
                    $data->case_type = "Civil";
                    $case_type_badge_class = 'badge bg-warning';
                } else {
                    $data->case_type = "Criminal";
                    $case_type_badge_class = 'badge bg-danger';
                }

                foreach($user_data as $user_data_individual){
                    if($user_data_individual->id == $data->lawyer_id){
                        $data->lawyer_id = $user_data_individual->name;
                    }
                }

                foreach($district_data as $district_data_individual){
                    if($district_data_individual->district_code == $data->district){
                        $data->district = $district_data_individual->district_name;
                    }
                }

                foreach($user_data as $user_data_individual){
                    if($user_data_individual->id == $data->generated_by){
                        $data->generated_by = $user_data_individual->name;
                    }
                }

                foreach($bank_data as $bank_data_individual){
                    if($bank_data_individual->bank_code == $data->bank_name){
                        $data->bank_name = $bank_data_individual->bank_name;
                    }
                }

                $data->bill_date = date('d-M-Y', strtotime($data->bill_date));

                $output .= '<tr>
                <th scope="row">' . $data->id . ' </th>
                <td>' . $data->invoice_id . ' </td>
                <td>' . $data->case_id . ' </td>
                <td><div class="' . $case_type_badge_class . '">' . $data->case_type . '</div></td>
                <td>' . $data->lawyer_id . ' </td>
                <td>' . $data->bill_amount . ' à§³' . ' </td>
                <td>' . $data->bill_date . ' </td>
                <td>' . $data->district . ' </td>
                <td>' . $data->generated_by . ' </td>
                <td>' . $data->bank_name . '</td>
                <td>' . $data->cheque_number . '</td>
                <td><div class="' . $bill_status_badge_class . '">' . $data->bill_status . '</div></td>
                <td>
                <a href="#" id="' . $data->id . '" class="btn btn-info waves-effect btn-label waves-light show_billing" data-bs-toggle="modal" data-bs-target="#showBillingModal"><i class="bx bx-user-circle label-icon"></i> View</a>
                <a href="#" id="' . $data->id . '" class="btn btn-warning waves-effect btn-label waves-light edit_billing" data-bs-toggle="modal" data-bs-target="#editBillingModal"><i class="bx bx-pencil label-icon"></i> Edit</a>
                <a href="#" id="' . $data->id . '" class="btn btn-danger waves-effect btn-label waves-light delete_billing"><i class="bx bx-trash label-icon"></i> Delete</a>
                </td>
                </tr>';
            }
            $output .= '</tbody></table>';
            echo $output;
        } else {
            echo '<h1 class="text-center text-secondary my-5">No record present in the database!</h1>';
        }
    }

    // Save Billing ajax request
    public function saveBilling(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'invoice_id' => ['required', 'string', 'max:255'],
            'case_id' => ['required', 'string', 'max:255'],
            'case_type' => ['required', 'string', 'max:255'],
            'lawyer_id' => ['required', 'string', 'max:255'],
            'bill_amount' => ['required', 'numeric', 'max:99999'],
            'bill_date' => ['required', 'string', 'max:255'],
            'district' => ['required', 'string', 'max:255'],
            // 'generated_by' => ['required', 'string', 'max:255'],
            'bank_name' => ['required', 'string', 'max:255'],
            'cheque_number' => ['required', 'string', 'max:255'],
            // 'bill_status' => ['required', 'string', 'max:255'],
        ],
        [
            'bill_amount.required' => 'The bill amount field is required, The bill amount must be a number, ( - _ , . / \ ) not allowed!',
        ]);

        if ($validator->passes()) {
            $billing = new Billing();

            $billing->invoice_id = $request->invoice_id;
            $billing->case_id = $request->case_id;
            $billing->case_type = $request->case_type;
            $billing->lawyer_id = $request->lawyer_id;
            $billing->bill_amount = $request->bill_amount;
            $billing->bill_date = date('Y-m-d', strtotime($request->bill_date));
            $billing->district = $request->district;
            $billing->generated_by = Auth::user()->id;
            $billing->bank_name = $request->bank_name;
            $billing->cheque_number = $request->cheque_number;

            if ($request->bill_status == "on") {
                $request->bill_status = "1";
            } else {
                $request->bill_status = "0";
            }
            $billing->bill_status = $request->bill_status;

            $query = $billing->save();

            if ($query) {
                return response()->json([
                    'isSuccess' => true,
                    'Message' => "Billing Details Saved successfully!",
                    'code' => 1
                ], 200); // Status code here
            } else {
                return response()->json([
                    'isSuccess' => false,
                    'Message' => "Something went wrong!",
                    'code' => 0
                ], 200); // Status code here
            }
        } else {
            return response()->json([
                'isSuccess' => false,
                'Message' => "Please check the inputs!",
                'code' => 0,
                'error' => $validator->errors()->toArray()
            ], 200); // Status code here
        }
    }

    // handle edit an user ajax request
    public function editUser(Request $request)
    {
        $id = $request->id;
        $edit_user_data = User::find($id);

        return response()->json($edit_user_data);
    }

    // update user ajax request
    public function updateUser(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'e_name' => ['required', 'string', 'max:255'],
            'e_email' => ['required', 'string', 'email', 'max:255'],
            'e_user_password' => ['nullable', 'string', 'min:6'],
            'e_dob' => ['required', 'date', 'before:today'],
            'e_avatar' => ['nullable', 'image', 'mimes:jpg,jpeg,png', 'max:1024'],
            'e_role_id' => ['required', 'string', 'max:255'],
            // 'e_status' => ['string', 'max:255'],
        ]);

        if ($validator->passes()) {

            $id = $request->e_user_id;
            $user_old_data = User::find($id);

            if (!empty($request->e_avatar)) {
                $image_path = public_path() . $user_old_data->avatar;  // Value is not URL but directory file path
                if (File::exists($image_path)) {
                    File::delete($image_path);
                }
                $avatar = $request->e_avatar;
                $avatarName = time() . '.' . $avatar->getClientOriginalExtension();
                $avatarPath = public_path('/images/');
                $avatar->move($avatarPath, $avatarName);
                $user_old_data->avatar = "/images/" . $avatarName;
            }

            if (!empty($request->e_user_password)) {
                $user_old_data->password = Hash::make($request->e_user_password);
            }

            $user_old_data->name = $request->e_name;
            $user_old_data->email = $request->e_email;
            $user_old_data->dob = date('Y-m-d', strtotime($request->e_dob));
            $user_old_data->role_id = $request->e_role_id;

            if ($request->e_status == "on") {
                $request->e_status = "1";
            } else {
                $request->e_status = "0";
            }
            $user_old_data->status = $request->e_status;

            $query = $user_old_data->save();

            if ($query) {
                return response()->json([
                    'isSuccess' => true,
                    'Message' => "User Details Updated successfully!",
                    'code' => 1
                ], 200); // Status code here
            } else {
                return response()->json([
                    'isSuccess' => false,
                    'Message' => "Something went wrong!",
                    'code' => 0
                ], 200); // Status code here
            }
        } else {
            return response()->json([
                'isSuccess' => false,
                'Message' => "Please check the inputs!",
                'code' => 0,
                'error' => $validator->errors()->toArray()
            ], 200); // Status code here
        }
    }

    // Delete user ajax request
    public function deleteUser(Request $request)
    {
        $id = $request->id;
        $delete_user_data = User::find($id);

        $image_path = public_path() . $delete_user_data->avatar;  // Value is not URL but directory file path
        if (File::exists($image_path)) {
            if (File::delete($image_path)) {
                User::destroy($id);
                return response()->json([
                    'isSuccess' => true,
                    'Message' => 'User deleted successfully!',
                    'code' => 1
                ], 200); // Status code here
            } else {
                return response()->json([
                    'isSuccess' => false,
                    'Message' => 'Something went wrong!',
                    'code' => 0
                ], 200); // Status code here
            }
        } else {
            return response()->json([
                'isSuccess' => false,
                'Message' => 'No Avatar found!',
                'code' => 0
            ], 200); // Status code here
        }
    }

    // Show User ajax request
    public function showUser(Request $request)
    {
        $id = $request->id;
        $show_user_data = User::find($id);

        $role_data = Role::find($show_user_data->role_id);

        $show_user_data->role_name = $role_data->role_name;

        return response()->json($show_user_data);
    }
}
